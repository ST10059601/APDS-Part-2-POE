version: 2.1
orbs:
  node: circleci/node@5

jobs:
  # Frontend test job
  test-frontend:
    executor: node/default
    working_directory: ~/project/frontend  # Set working directory to frontend
    steps:
      - checkout:
          path: ~/project
      - node/install-packages:
          app-dir: ~/project/frontend  # Ensure app-dir points to frontend
          pkg-manager: npm
      - run:
          name: Run frontend tests
          command: npm test --passWithNoTests

  # Frontend build job
  build-frontend:
    executor: node/default
    working_directory: ~/project/frontend
    steps:
      - checkout:
          path: ~/project
      - node/install-packages:
          app-dir: ~/project/frontend  # Ensure app-dir points to frontend
          pkg-manager: npm
      - run:
          command: npm run build
      - run:
          name: Create the ~/artifacts directory if it doesn't exist
          command: mkdir -p ~/artifacts
      - run:
          name: Copy frontend artifacts
          command: cp -R build dist public .output .next .docusaurus ~/artifacts 2>/dev/null || true
      - store_artifacts:
          path: ~/artifacts
          destination: frontend-build

  # Backend test job
  test-backend:
    executor: node/default
    working_directory: ~/project/Backend  # Set working directory to Backend (capital B)
    steps:
      - checkout:
          path: ~/project
      - node/install-packages:
          app-dir: ~/project/Backend  # Ensure app-dir points to Backend (capital B)
          pkg-manager: npm
      - run:
          name: Run backend tests
          command: npm test --passWithNoTests

  # Backend build job (if applicable)
  build-backend:
    executor: node/default
    working_directory: ~/project/Backend  # Set working directory to Backend (capital B)
    steps:
      - checkout:
          path: ~/project
      - node/install-packages:
          app-dir: ~/project/Backend  # Ensure app-dir points to Backend (capital B)
          pkg-manager: npm
      - run:
          command: npm run build

  # SonarQube scanning job
  sonarqube:
  working_directory: ~/build
  docker:
    - image: sonarsource/sonar-scanner-cli
  resource_class: small
  steps:
    - run: find .
    - attach_workspace:
        at: ~/workspace
    - run: | 
        SONAR_BRANCH="${CIRCLE_BRANCH:-master}"
        echo "Sonar branch value is: " $SONAR_BRANCH
        echo "Sonar org value is : "$SONAR_ORG
        sonar-scanner \
        -Dsonar.projectKey="$SONAR_PROJECT_KEY" \
        -Dsonar.organization="$SONAR_ORG" \
        -Dsonar.host.url=https://sonarcloud.io \
        -Dsonar.exclusions="**/android/**,**/ios/**" \
        -Dsonar.c.file.suffixes=- \
        -Dsonar.cpp.file.suffixes=- \
        -Dsonar.objc.file.suffixes=- \
        -Dsonar.login="$SONAR_TOKEN" \
        -Dsonar.branch.name="$SONAR_BRANCH" \
        -Dsonar.sources="."


  # Deployment (example, to be replaced with actual deploy steps)
  deploy:
    docker:
      - image: cimg/base:stable
    steps:
      - run:
          name: Deploy application
          command: '#e.g. ./deploy.sh'

workflows:
  build-and-test:
    jobs:
      - test-frontend
      - build-frontend:
          requires:
            - test-frontend
      - test-backend
      - build-backend:
          requires:
            - test-backend
      - sonarqube
